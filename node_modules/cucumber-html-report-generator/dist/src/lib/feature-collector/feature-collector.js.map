{"version":3,"file":"feature-collector.js","sourceRoot":"","sources":["../../../../src/lib/feature-collector/feature-collector.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sFAAwE;AAExE,sDAA8B;AAG9B,MAAa,mBAAmB;IAG9B,YAAoB,gBAA0C;QAC5D,IAAI,CAAC,WAAW,GAAG,gBAAgB,EAAE,cAAc,CAAC;IACtD,CAAC;IAEM,KAAK,CAAC,eAAe;QAC1B,MAAM,MAAM,GAAG,eAAe,CAAC,WAAW,CAAE,IAAI,CAAC,WAAW,CAAE,CAAC;QAE/D,IAAK,CAAE,MAAM,EAAG;YACd,OAAmC,EAAE,CAAC;SACvC;QAED,MAAM,KAAK,GAAG,MAAM,eAAe,CAAC,aAAa,CAAE,IAAI,CAAC,WAAY,CAAE,CAAC;QACvE,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAE,CAAE,IAAI,EAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAE,UAAU,CAAE,CAAE,CAAC;QAE7E,IAAI,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,CAC9B,YAAY,CAAC,GAAG,CAAE,KAAK,EAAG,OAAO,EAAG,EAAE;YACpC,MAAM,MAAM,GAAG,iBAAO,CAAC,SAAS,CAAE,CAAE,OAAO,CAAE,CAAE,CAAC;YAChD,MAAM,eAAe,GAA6B,CAAE,MAAM,eAAe,CAAC,kBAAkB,CAAE,MAAM,CAAE,CAAE,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC;YAC5H,OAAO,eAAe,CAAC;QACzB,CAAC,CAAE,CACJ,CAAC;QAEF,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAE,OAAO,CAAE,CAAC;QAEtC,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC;IAC3C,CAAC;CACF;AA7BD,kDA6BC","sourcesContent":["import * as CommonFunctions from '../common-functions/common-functions';\nimport type * as Models from '../models/models';\nimport Gherkin from 'gherkin';\nimport type { messages } from 'cucumber-messages';\n\nexport class CollectFeatureFiles {\n  private readonly featuresDir: string| undefined;\n\n  public constructor( reportGeneration?: Models.ReportGeneration ) {\n    this.featuresDir = reportGeneration?.featuresFolder;\n  }\n\n  public async collectFeatures(): Promise<messages.GherkinDocument[] | null> {\n    const result = CommonFunctions.checkFolder( this.featuresDir );\n\n    if ( ! result ) {\n      return <messages.GherkinDocument[]>[];\n    }\n\n    const files = await CommonFunctions.getFilesAsync( this.featuresDir! );\n    const featureFiles = files.filter( ( file ) => file.endsWith( '.feature' ) );\n\n    let features = await Promise.all(\n      featureFiles.map( async ( feature ) => {\n        const stream = Gherkin.fromPaths( [ feature ] );\n        const gherkinDocument = <messages.GherkinDocument>( await CommonFunctions.streamToArrayAsync( stream ) )[1].gherkinDocument;\n        return gherkinDocument;\n      } ),\n    );\n\n    features = features.filter( Boolean );\n\n    return features.length ? features : null;\n  }\n}\n"]}